security:
    # Session fixation protection
    session_fixation_strategy: migrate
    
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        users_in_memory: 
            memory:
                users:
                    '%env(ADMIN_USERNAME)%':
                        password: '%env(ADMIN_PASSWORD_HASH)%'
                        roles: 'ROLE_ADMIN'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            lazy: true
            provider: users_in_memory
            # Enhanced form login configuration
            form_login:
                login_path: app_admin_login
                check_path: app_admin_login
                default_target_path: app_admin_index
                enable_csrf: true # Enable CSRF protection for login
            logout:
                path: app_admin_logout
                target: app_public_index
                invalidate_session: true # Explicitly invalidate session on logout
                delete_cookies:
                    PHPSESSID: { path: /, domain: ~ }
        main:
            lazy: true
            provider: users_in_memory

    access_control:
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
